/*
 * Domain Graph API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pat.cataldo@autodesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DomainGraphClient);
  }
}(this, function(expect, DomainGraphClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DomainGraphClient.NodesApi();
  });

  describe('(package)', function() {
    describe('NodesApi', function() {
      describe('addNode', function() {
        it('should call addNode successfully', function(done) {
          // TODO: uncomment, update parameter values for addNode call and complete the assertions
          /*
          var opts = {};
          opts.node = new DomainGraphClient.Node();
          opts.node.type = "Geometry";
          opts.node.properties = [new DomainGraphClient.Property()];
          opts.node.properties[0].name = "PropertyName";
          opts.node.properties[0].value = "PropertyValue";
          opts.node.relationships = [new DomainGraphClient.Relationship()];
          opts.node.relationships[0].id = "123";
          opts.node.relationships[0].type = "HASA";
          opts.node.relationships[0].properties = [new DomainGraphClient.Property()];
          opts.node.relationships[0].properties[0].name = "PropertyName";
          opts.node.relationships[0].properties[0].value = "PropertyValue";
          opts.node.relationships[0].node1 = "123";
          opts.node.relationships[0].node2 = "123";

          instance.addNode(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(DomainGraphClient.Node);
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("Geometry");
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Property);
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("PropertyName");
                expect(data.value).to.be.a('string');
                // expect(data.value).to.be("PropertyValue");
              }
            }
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Relationship);
                expect(data.id).to.be.a('string');
                // expect(data.id).to.be("123");
                expect(data.type).to.be.a('string');
                // expect(data.type).to.be("HASA");
                {
                  let dataCtr = data.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DomainGraphClient.Property);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("PropertyName");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("PropertyValue");
                  }
                }
                expect(data.node1).to.be.a('string');
                // expect(data.node1).to.be("123");
                expect(data.node2).to.be.a('string');
                // expect(data.node2).to.be("123");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addRelationships', function() {
        it('should call addRelationships successfully', function(done) {
          // TODO: uncomment, update parameter values for addRelationships call and complete the assertions
          /*
          var nodeId = 56;
          var opts = {};
          opts.relationships = new DomainGraphClient.Relationships();
          opts.relationships.relationships = [new DomainGraphClient.Relationship()];
          opts.relationships.relationships[0].id = "123";
          opts.relationships.relationships[0].type = "HASA";
          opts.relationships.relationships[0].properties = [new DomainGraphClient.Property()];
          opts.relationships.relationships[0].properties[0].name = "PropertyName";
          opts.relationships.relationships[0].properties[0].value = "PropertyValue";
          opts.relationships.relationships[0].node1 = "123";
          opts.relationships.relationships[0].node2 = "123";

          instance.addRelationships(nodeId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(DomainGraphClient.Node);
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("Geometry");
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Property);
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("PropertyName");
                expect(data.value).to.be.a('string');
                // expect(data.value).to.be("PropertyValue");
              }
            }
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Relationship);
                expect(data.id).to.be.a('string');
                // expect(data.id).to.be("123");
                expect(data.type).to.be.a('string');
                // expect(data.type).to.be("HASA");
                {
                  let dataCtr = data.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DomainGraphClient.Property);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("PropertyName");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("PropertyValue");
                  }
                }
                expect(data.node1).to.be.a('string');
                // expect(data.node1).to.be("123");
                expect(data.node2).to.be.a('string');
                // expect(data.node2).to.be("123");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNodeById', function() {
        it('should call deleteNodeById successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNodeById call
          /*
          var nodeId = 56;

          instance.deleteNodeById(nodeId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRelationships', function() {
        it('should call deleteRelationships successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRelationships call
          /*
          var nodeId = 56;
          var opts = {};
          opts.relationships = new DomainGraphClient.Relationships2();
          opts.relationships.relationships = [new DomainGraphClient.Relationship()];
          opts.relationships.relationships[0].id = "123";
          opts.relationships.relationships[0].type = "HASA";
          opts.relationships.relationships[0].properties = [new DomainGraphClient.Property()];
          opts.relationships.relationships[0].properties[0].name = "PropertyName";
          opts.relationships.relationships[0].properties[0].value = "PropertyValue";
          opts.relationships.relationships[0].node1 = "123";
          opts.relationships.relationships[0].node2 = "123";

          instance.deleteRelationships(nodeId, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNodeById', function() {
        it('should call getNodeById successfully', function(done) {
          // TODO: uncomment, update parameter values for getNodeById call and complete the assertions
          /*
          var nodeId = 56;

          instance.getNodeById(nodeId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(DomainGraphClient.Node);
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("Geometry");
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Property);
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("PropertyName");
                expect(data.value).to.be.a('string');
                // expect(data.value).to.be("PropertyValue");
              }
            }
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Relationship);
                expect(data.id).to.be.a('string');
                // expect(data.id).to.be("123");
                expect(data.type).to.be.a('string');
                // expect(data.type).to.be("HASA");
                {
                  let dataCtr = data.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DomainGraphClient.Property);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("PropertyName");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("PropertyValue");
                  }
                }
                expect(data.node1).to.be.a('string');
                // expect(data.node1).to.be("123");
                expect(data.node2).to.be.a('string');
                // expect(data.node2).to.be("123");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNodeRelationshipsById', function() {
        it('should call getNodeRelationshipsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getNodeRelationshipsById call and complete the assertions
          /*
          var nodeId = 56;

          instance.getNodeRelationshipsById(nodeId).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DomainGraphClient.Relationship);
              expect(data.id).to.be.a('string');
              // expect(data.id).to.be("123");
              expect(data.type).to.be.a('string');
              // expect(data.type).to.be("HASA");
              {
                let dataCtr = data.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DomainGraphClient.Property);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("PropertyName");
                  expect(data.value).to.be.a('string');
                  // expect(data.value).to.be("PropertyValue");
                }
              }
              expect(data.node1).to.be.a('string');
              // expect(data.node1).to.be("123");
              expect(data.node2).to.be.a('string');
              // expect(data.node2).to.be("123");
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('replaceNodeRelationshipsById', function() {
        it('should call replaceNodeRelationshipsById successfully', function(done) {
          // TODO: uncomment, update parameter values for replaceNodeRelationshipsById call and complete the assertions
          /*
          var nodeId = 56;
          var opts = {};
          opts.relationships = new DomainGraphClient.Relationships1();
          opts.relationships.relationships = [new DomainGraphClient.Relationship()];
          opts.relationships.relationships[0].id = "123";
          opts.relationships.relationships[0].type = "HASA";
          opts.relationships.relationships[0].properties = [new DomainGraphClient.Property()];
          opts.relationships.relationships[0].properties[0].name = "PropertyName";
          opts.relationships.relationships[0].properties[0].value = "PropertyValue";
          opts.relationships.relationships[0].node1 = "123";
          opts.relationships.relationships[0].node2 = "123";

          instance.replaceNodeRelationshipsById(nodeId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(DomainGraphClient.Node);
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("Geometry");
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Property);
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("PropertyName");
                expect(data.value).to.be.a('string');
                // expect(data.value).to.be("PropertyValue");
              }
            }
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Relationship);
                expect(data.id).to.be.a('string');
                // expect(data.id).to.be("123");
                expect(data.type).to.be.a('string');
                // expect(data.type).to.be("HASA");
                {
                  let dataCtr = data.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DomainGraphClient.Property);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("PropertyName");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("PropertyValue");
                  }
                }
                expect(data.node1).to.be.a('string');
                // expect(data.node1).to.be("123");
                expect(data.node2).to.be.a('string');
                // expect(data.node2).to.be("123");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNodeById', function() {
        it('should call updateNodeById successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNodeById call and complete the assertions
          /*
          var nodeId = 56;
          var opts = {};
          opts.node = new DomainGraphClient.Node();
          opts.node.type = "Geometry";
          opts.node.properties = [new DomainGraphClient.Property()];
          opts.node.properties[0].name = "PropertyName";
          opts.node.properties[0].value = "PropertyValue";
          opts.node.relationships = [new DomainGraphClient.Relationship()];
          opts.node.relationships[0].id = "123";
          opts.node.relationships[0].type = "HASA";
          opts.node.relationships[0].properties = [new DomainGraphClient.Property()];
          opts.node.relationships[0].properties[0].name = "PropertyName";
          opts.node.relationships[0].properties[0].value = "PropertyValue";
          opts.node.relationships[0].node1 = "123";
          opts.node.relationships[0].node2 = "123";

          instance.updateNodeById(nodeId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(DomainGraphClient.Node);
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("Geometry");
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Property);
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("PropertyName");
                expect(data.value).to.be.a('string');
                // expect(data.value).to.be("PropertyValue");
              }
            }
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DomainGraphClient.Relationship);
                expect(data.id).to.be.a('string');
                // expect(data.id).to.be("123");
                expect(data.type).to.be.a('string');
                // expect(data.type).to.be("HASA");
                {
                  let dataCtr = data.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DomainGraphClient.Property);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("PropertyName");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("PropertyValue");
                  }
                }
                expect(data.node1).to.be.a('string');
                // expect(data.node1).to.be("123");
                expect(data.node2).to.be.a('string');
                // expect(data.node2).to.be("123");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
