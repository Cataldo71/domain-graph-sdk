/*
 * Domain Graph API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pat.cataldo@autodesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DomainGraphClient);
  }
}(this, function(expect, DomainGraphClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DomainGraphClient.ConfigurationApi();
  });

  describe('(package)', function() {
    describe('ConfigurationApi', function() {
      describe('addConfiguration', function() {
        it('should call addConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for addConfiguration call
          /*
          var opts = {};
          opts.configuration = new DomainGraphClient.Configuration();
          opts.configuration.nodeLabels = [new DomainGraphClient.NodeTemplate()];
          opts.configuration.nodeLabels[0].label = "NodeType";
          opts.configuration.nodeLabels[0].text = "Display String";
          opts.configuration.nodeLabels[0].color = "blue";
          opts.configuration.nodeLabels[0].shape = "circle";
          opts.configuration.relationshipLabels = [new DomainGraphClient.RelationshipTemplate()];
          opts.configuration.relationshipLabels[0].label = "HASA";
          opts.configuration.relationshipLabels[0].text = "Has a";

          instance.addConfiguration(opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getConfiguration', function() {
        it('should call getConfiguration successfully', function(done) {
          // TODO: uncomment getConfiguration call and complete the assertions
          /*

          instance.getConfiguration().then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DomainGraphClient.Configuration);
              {
                let dataCtr = data.nodeLabels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DomainGraphClient.NodeTemplate);
                  expect(data.label).to.be.a('string');
                  // expect(data.label).to.be("NodeType");
                  expect(data.text).to.be.a('string');
                  // expect(data.text).to.be("Display String");
                  expect(data.color).to.be.a('string');
                  // expect(data.color).to.be("blue");
                  expect(data.shape).to.be.a('string');
                  // expect(data.shape).to.be("circle");
                }
              }
              {
                let dataCtr = data.relationshipLabels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DomainGraphClient.RelationshipTemplate);
                  expect(data.label).to.be.a('string');
                  // expect(data.label).to.be("HASA");
                  expect(data.text).to.be.a('string');
                  // expect(data.text).to.be("Has a");
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mergeConfiguration', function() {
        it('should call mergeConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for mergeConfiguration call
          /*
          var opts = {};
          opts.configuration = new DomainGraphClient.Configuration();
          opts.configuration.nodeLabels = [new DomainGraphClient.NodeTemplate()];
          opts.configuration.nodeLabels[0].label = "NodeType";
          opts.configuration.nodeLabels[0].text = "Display String";
          opts.configuration.nodeLabels[0].color = "blue";
          opts.configuration.nodeLabels[0].shape = "circle";
          opts.configuration.relationshipLabels = [new DomainGraphClient.RelationshipTemplate()];
          opts.configuration.relationshipLabels[0].label = "HASA";
          opts.configuration.relationshipLabels[0].text = "Has a";

          instance.mergeConfiguration(opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
