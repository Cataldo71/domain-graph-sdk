/*
 * Domain Graph API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pat.cataldo@autodesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Configuration} from '../model/Configuration';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version 1.0.0
*/
export class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * replaces the configuration with a new one
     * overwrites the existing configuration
     * @param {Object} opts Optional parameters
     * @param {module:model/Configuration} opts.configuration New Configuration for this service
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addConfigurationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['configuration'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * replaces the configuration with a new one
     * overwrites the existing configuration
     * @param {Object} opts Optional parameters
     * @param {module:model/Configuration} opts.configuration New Configuration for this service
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addConfiguration(opts) {
      return this.addConfigurationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * gets the full configuration
     * Returns the full configuration for the Domain Graph Visualizer Application 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Configuration>} and HTTP response
     */
    getConfigurationWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Configuration];

      return this.apiClient.callApi(
        '/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * gets the full configuration
     * Returns the full configuration for the Domain Graph Visualizer Application 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Configuration>}
     */
    getConfiguration() {
      return this.getConfigurationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updates the configuration with new data
     * merges new data into the existing configuration
     * @param {Object} opts Optional parameters
     * @param {module:model/Configuration} opts.configuration Update Configuration data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    mergeConfigurationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['configuration'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updates the configuration with new data
     * merges new data into the existing configuration
     * @param {Object} opts Optional parameters
     * @param {module:model/Configuration} opts.configuration Update Configuration data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    mergeConfiguration(opts) {
      return this.mergeConfigurationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
